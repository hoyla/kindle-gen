AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Converting print-sent content to Amazon's KPP NITF format

Parameters:
  Stack:
    Description: Stack name
    Type: String
    Default: content-api-kindle-gen
  App:
    Description: Application name
    Type: String
    Default: kindle-gen
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - CODE
      - PROD
    Default: CODE
  AccuWeatherKey:
    Description: 'a key from https://developer.accuweather.com'
    Type: String
    NoEcho: true
  AccuWeatherUrl:
    Description: 'The API URL for the AccuWeather service'
    Type: String
  ContentApiKey:
    Description: 'A key generated by https://bonobo.capi.gutools.co.uk'
    Type: String
    NoEcho: true
  ContentApiUrl:
    Description: 'The Content API URL to retrieve the articles to publish'
    Type: String
  OutputBucket:
    Description: The bucket where the output (NITF files) should be stored
    Type: String
    Default: kindle-gen-published-files
  PublicDirectory:
    Description: The publicly accessible prefix through which the published files will be available after every run
    Type: String
    Default: CurrentIssue
  CustomConfig:
    Description: 'Overrides application configuration settings. Should be in JSON format.'
    Type: String
    Default: ''
  DeployBucket:
    Description: Bucket where RiffRaff uploads artifacts on deploy
    Type: String
    Default: content-api-dist

Resources:
  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${App}-${Stage}  # must be kept in sync with FunctionName and LogGroupName everywhere in the file
      Description: Converting content to NITF format
      Runtime: java8
      Handler: com.gu.kindlegen.app.Lambda::handler
      MemorySize: 3008  # We usually use < 384 MB of RAM. However, we're I/O-bound so increasing cores improves speed drastically.
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          ConfigSettings:
            Fn::Sub: |
              {
                "accuweather": {
                  "apiKey": "${AccuWeatherKey}",
                  "baseUrl": "${AccuWeatherUrl}"
                },
                "content-api": {
                  "key": "${ContentApiKey}",
                  "url": "${ContentApiUrl}"
                },
                "s3": {
                  "bucket": "${OutputBucket}",
                  "prefix": "${Stage}",
                  "publicDirectory": "${Stage}/${PublicDirectory}"
                },
                ${CustomConfig}
              }
      Events:
        DailyGMTRun:
          Type: Schedule
          Properties:
            Schedule: cron(10 1 * * ? *)  # Run at 01:10 AM GMT (UTC+0) every day
        DailyBSTRunGMTPrerun:
          Type: Schedule
          Properties:
            Schedule: cron(10 0 * * ? *)  # Run at 12:10 AM GMT (UTC+0) / 01:10 AM BST (UTC+1) every day
        DailyBSTPrerun:
          Type: Schedule
          Properties:
            Schedule: cron(10 23 * * ? *)  # Run at 12:10 AM BST (UTC+1) every day
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}/${App}.zip
      Policies:
        - AWSLambdaBasicExecutionRole  # Managed Policy that includes CloudWatch log permissions
        - AWSXrayWriteOnlyAccess       # Managed Policy that enables X-Ray telemetry
        - Statement:
            Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub "${LambdaOutputBucket.Arn}/${Stage}/*"
        - Statement:
            Effect: Allow
            Action:
              - s3:GetBucketWebsite
              - s3:PutBucketWebsite
            Resource: !GetAtt LambdaOutputBucket.Arn

  LambdaOutputBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Retain
    Properties:
      BucketName: !Ref OutputBucket
      LifecycleConfiguration:
        Rules:
          - ExpirationInDays: 366
            Status: Enabled
      WebsiteConfiguration:
        IndexDocument: index.html  # not actually used
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Stack
          Value: !Ref Stack
        - Key: Stage
          Value: !Ref Stage

  LambdaOutputBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref LambdaOutputBucket
      PolicyDocument:
        Statement:
          Effect: Allow
          Action:
          - s3:GetObject
          Resource: !Sub "${LambdaOutputBucket.Arn}/${Stage}/*"
          Principal: "*"

  AlarmsTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: !Sub ${App}-${Stage}-alarms

  # !!! Must be created AFTER the whole stack!
  # The metric references a log group that won't be created until after the stack is created _and_ the lambda executed.
  # For this reason, this resource MUST be commented out to create the stack, and then uncommented to update the stack.
  LambdaLogErrors:
    Type: "AWS::Logs::MetricFilter"
    Properties:
      FilterPattern: "?FATAL ?ERROR ?WARN"
      LogGroupName: !Sub "/aws/lambda/${App}-${Stage}"  # must be kept in sync with Lambda.FunctionName
      MetricTransformations:
        - MetricValue: 1
          MetricNamespace: !Sub "content-api/${App}-${Stage}"
          MetricName: LogErrors

  LambdaLogErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a notification if the Lambda logs an error
      Namespace: !Sub "content-api/${App}-${Stage}"
      MetricName:         LogErrors
      Statistic:          Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold:          0
      Period: 60
      EvaluationPeriods: 1
      TreatMissingData: notBreaching  # no invocations -> no errors -> no alarm
      AlarmActions:
      - !Ref AlarmsTopic

  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a notification if the Lambda fails with an error
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Sub ${App}-${Stage}  # must be kept in sync with Lambda.FunctionName
      MetricName:         Errors
      Statistic:          Sum
      ComparisonOperator: GreaterThanThreshold
      Threshold:          0
      Period: 60
      EvaluationPeriods: 1
      TreatMissingData: notBreaching  # no invocations -> no errors -> no alarm
      AlarmActions:
        - !Ref AlarmsTopic

  LambdaNotInvokedAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Trigger a notification if the Lambda is not invoked in a day
      Namespace: AWS/Lambda
      Dimensions:
        - Name: FunctionName
          Value: !Sub ${App}-${Stage}  # must be kept in sync with Lambda.FunctionName
      MetricName:         Invocations
      Statistic:          Sum
      ComparisonOperator: LessThanThreshold
      Threshold:          1
      Period: 86400  # 1 day
      EvaluationPeriods: 1
      TreatMissingData: breaching
      AlarmActions:
        - !Ref AlarmsTopic
      OKActions:
        - !Ref AlarmsTopic
