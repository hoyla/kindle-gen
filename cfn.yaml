AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: Converting print-sent content to Amazon's KPP NITF format

Parameters:
  Stack:
    Description: Stack name
    Type: String
    Default: content-api-kindle-gen
  App:
    Description: Application name
    Type: String
    Default: kindle-gen
  Stage:
    Description: Stage name
    Type: String
    AllowedValues:
      - CODE
      - PROD
    Default: CODE
  ContentApiKey:
    Description: 'A key generated by https://bonobo.capi.gutools.co.uk'
    Type: String
    NoEcho: true
  ContentApiUrl:
    Description: 'The Content API URL to retrieve the articles to publish'
    Type: String
  OutputBucket:
    Description: The bucket where the output (NITF files) should be stored
    Type: String
    Default: kindle-gen-published-files
  CustomConfig:
    Description: 'Overrides application configuration settings. Should be in JSON format.'
    Type: String
    Default: ''
  DeployBucket:
    Description: Bucket where RiffRaff uploads artifacts on deploy
    Type: String
    Default: content-api-dist

Resources:
  Lambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${App}-${Stage}
      Description: Converting content to NITF format
      Runtime: java8
      Handler: com.gu.kindlegen.Lambda::handler
      MemorySize: 512
      Timeout: 300
      Tracing: Active
      Environment:
        Variables:
          ConfigSettings:
            Fn::Sub: |
              {
                "content-api": {
                  "key": "${ContentApiKey}",
                  "url": "${ContentApiUrl}"
                },
                "serialization": {
                  "s3": {
                    "bucket" = "${OutputBucket}",
                    "prefix" = "${Stage}/"
                  }
                },
                ${CustomConfig}
              }
      Events:
        DailyEvent:
          Type: Schedule
          Properties:
            Schedule: cron(30 1 * * ? *)  # Run at 01:30 AM every day
      CodeUri:
        Bucket: !Ref DeployBucket
        Key: !Sub ${Stack}/${Stage}/${App}/${App}.zip
      Policies:
        - AWSLambdaBasicExecutionRole  # Managed Policy that includes CloudWatch log permissions
        - AWSXrayWriteOnlyAccess       # Managed Policy that enables X-Ray telemetry
        - Statement:
            Effect: Allow
            Action:
              - s3:PutObject
            Resource: !Sub "arn:aws:s3:::${OutputBucket}/${Stage}/*"
